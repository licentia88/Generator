@typeparam TModel
@inherits MudTable<TModel>
@using Generator.Shared.Extensions

@if (DataSource is null) { return; }

<CascadingValue Name="@(nameof(GenGrid<TModel>.ParentComponent))" Value="this">

    @{
        if (GenColumns is not null && IsFirstRender)
        {
            @GenColumns
            IsFirstRender = false;
        }
    }

    <MudCard Elevation="4" Style="@(Style??"width:100%important")" Class="@Class">
        <MudCardHeader>
            <CardHeaderContent>
                <MudGrid>
                    <MudText Style="margin:1rem!important" Align="Align.Start" Typo="Typo.h6">
                        @Title
                    </MudText>
                    <MudSpacer />
                    @{
                        if (EnableSearch)
                        {
                            <MudTextField @bind-Value="@_searchString"
                                          Disabled="SearchDisabled"
                                          Class="mt-0 mr-5"
                                          Placeholder="@SearchPlaceHolderText"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          IconSize="Size.Medium">

                            </MudTextField>
                        }
                    }
                </MudGrid>
            </CardHeaderContent>
            <CardHeaderActions>

            </CardHeaderActions>
        </MudCardHeader>

        <MudGrid Class="pt-5 pb-5 pr-15" Justify="Justify.FlexEnd">
            @{
                if (GenHeaderButtons is not null)
                {
                    @GenHeaderButtons
                }
            }
        </MudGrid>

        @* ReSharper disable once AsyncVoidLambda *@
        @{
            <MudTable T="TModel"
                      Items="DataSource"
                      Dense="Dense"
                      RowClassFunc="@RowClassFunc"
                      MultiSelection="MultiSelection"
                      Breakpoint="Breakpoint.None"
                      Hover="Hover"
                      Elevation="0"
                      FixedHeader="FixedHeader"
                      FixedFooter="FixedFooter"
                      Height="Height"
                      @bind-SelectedItem="SelectedItem"
                      SelectedItems="@SelectedItems"
                      Filter="new Func<TModel,bool>(SearchFunction)"
                      Virtualize="Virtualize"
                      OnCommitEditClick="OnEditCLick"
                      RowEditPreview="async x=>await OnBackUp(x.CastTo<TModel>())"
                      RowEditCancel="x=> OnCancelClick(x.CastTo<TModel>())"
                      RowEditCommit="async x => await OnCommit(x)"
                      IsEditRowSwitchingBlocked="true"
                      ApplyButtonPosition="TableApplyButtonPosition.End"
                      EditButtonPosition="TableEditButtonPosition.End"
                      EditTrigger="TableEditTrigger.EditButton"
                      ReadOnly="false"
                      CanCancelEdit="true">


                <HeaderContent>
                    @{

                        if (HasDetail && EditMode != EditMode.SmartForm)
                        {
                            <MudTh>

                            </MudTh>
                        }
                        foreach (var item in GetComponentsOf<IGenComponent>().Where(x => x.VisibleOnGrid))
                        {
                            <MudTh>
                                @item.Label
                            </MudTh>
                        }
                    }
                    <MudTh>

                        @{
                            if (Create.HasDelegate)
                            {
                                <div style="@(DetailClicked?"pointer-events: none;opacity:0.4;":string.Empty)">
                                    <MudGrid Class="ml-10" Justify="Justify.FlexEnd">
                                        <MudIconButton Icon="@AddIcon" Size="Size.Medium" @onclick="OnCreateClick" Disabled="NewDisabled" />
                                    </MudGrid>
                                </div>
                            }
                        }

                    </MudTh>
                </HeaderContent>

                <RowTemplate>

                    @{
                        if (HasDetail && EditMode != EditMode.SmartForm)
                        {
                            var expandIcon = Icons.Material.Filled.ExpandMore;

                            if(ShouldDisplay(context))
                            {
                                expandIcon = Icons.Material.Filled.ExpandLess;
                            }

                            <MudTd>
                                <MudIconButton Size="Size.Small"
                                               Disabled="ExpandDisabled"
                                               Icon="@expandIcon"
                                               OnClick="@(()=> OnDetailClicked(context))">
                                </MudIconButton>
                            </MudTd>

                        }


                        foreach (var item in GetComponentsOf<IGenComponent>().Where(x => x.VisibleOnGrid))
                        {
                            @*@onclick:stopPropagation = "EditMode==EditMode.Popup"*@
                            <MudTd @onclick:stopPropagation="EditMode==EditMode.Form">
                                @item.RenderAsGridComponent(context)
                            </MudTd>
                        }

                        <MudTd>

                        </MudTd>


                    }
                </RowTemplate>
                <RowEditingTemplate>
                    @{
                        if(EditMode != EditMode.Inline)
                        {
                            var editingRow = EditButtonActionList.Select(x => x.Target.CastTo<MudTr>()).FirstOrDefault(x => x.Item.CastTo<TModel>().Equals(SelectedItem));
                            editingRow?.Context.Table.SetEditingItem(null);

                            StateHasChanged();
 
                            editingRow.SetFieldValue("hasBeenCanceled", false);
                            editingRow.SetFieldValue("hasBeenCommitted", false);
                            editingRow.SetFieldValue("hasBeenClickedFirstTime", false);

                        }
                        if (HasDetail && EditMode != EditMode.SmartForm)
                        {
                            <MudTd></MudTd>
                        }

                        foreach (var item in GetComponentsOf<IGenComponent>().Where(x => x.VisibleOnGrid).ToList())
                        {
                            <MudTd Style="width:auto!important">
                                @item.RenderAsComponent(context, ignoreLabels: true)
                            </MudTd>
                        }

                        <MudTh>

                        </MudTh>
                    }
                </RowEditingTemplate>
                <ChildRowContent>
                    @{


                        if (EditMode != EditMode.SmartForm && ShouldDisplay(context) && HasDetail)
                        {
                            <tr style="display:table-row!important;overflow:hidden">
                                <td style="display:table-cell!important;overflow:hidden" colspan="12">
                                    @GenDetailGrid(context)
                                </td>
                            </tr>
                        }
                    }

                </ChildRowContent>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new[] { 10,25,50,100, !DataSource.Any() ?999:DataSource.Count}" />
                </PagerContent>

                <EditButtonContent Context="button">

                    <div style="@(DetailClicked?"pointer-events: none;opacity:0.4;":string.Empty)">
                        @{
                            if (Update.HasDelegate)
                            {
                                if (!EditButtonActionList.Contains(button.ButtonAction))
                                    EditButtonActionList.Add((button.ButtonAction));
                                <MudIconButton @ref="EditButtonRef" Size="@Size.Small" Icon="@Icons.Outlined.Edit" Class="pa-0" OnClick="@(
                            async () =>
                            {
                                if(ViewState == ViewState.None)
                                {
                                ViewState = ViewState.Update;
                                }

                                if (ViewState != ViewState.Create && Load.HasDelegate)
                                {
                                  await Load.InvokeAsync(this);
                                }

                                button.ButtonAction.Invoke();
                            })"
                                               Disabled="@button.ButtonDisabled" />
                            }
                        }

                        @{
                            if (Delete.HasDelegate)
                            {
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" Class="pa-0" OnClick="@(()=>OnDeleteClicked(button.ButtonAction))" Disabled="@button.ButtonDisabled" />
                            }
                        }

                    </div>
                </EditButtonContent>
            </MudTable>


        }


    </MudCard>

</CascadingValue>
