@typeparam TModel where TModel : new()
@inherits MudTable<TModel>
@implements INonGenGrid
@implements IGenGrid<TModel>

<CascadingValue Name="@(nameof(Parent))" Value="this">

    @{
        if (GenColumns is not null && ((INonGenGrid)this).IsFirstRender)
        {
            @GenColumns

            if (!((INonGenGrid)this).IsRendered)
            {
                <CascadingValue Value="true" Name="@(nameof(IGenControl.IsSearchField))">
                    @GenSearchFields
                </CascadingValue>
            }
            @*<CascadingValue Value="true" Name="@(nameof(IGenComponent.IsSearchField))">
                    @GenSearchFields
                </CascadingValue>*@

            ((INonGenGrid)this).IsFirstRender = false;
        }
    }

    <MudCard Elevation="4" Style="@(Style ?? "width:100%important;overflow-x:hidden!important;")" Class="@Class">
        <MudCardHeader>
            <CardHeaderContent>
                <MudGrid>
                    <MudText Style="margin: 1rem !important" Align="Align.Start" Typo="Typo.h6">
                        @Title
                    </MudText>
                    <MudSpacer />
                    @*@{
                            if (EnableSearch)
                            {
                                <MudTextField @bind-Value="@_searchString"
                                              Disabled=" ((INonGenGrid)this). SearchDisabled"
                                              Class="mt-0 mr-5"
                                              Placeholder="@SearchPlaceHolderText"
                                              Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Search"
                                              IconSize="Size.Medium">

                                </MudTextField>
                            }
                        }*@
                </MudGrid>

                @{
                    <MudGrid Class="">
                        @{
                            if (GenSearchFields is not null)
                            {
                                var searchFieldModel = new Dictionary<string, object>();

                                foreach (var item in SearchFieldComponents.Where(x => x is not GenSpacer))
                                {
                                    searchFieldModel.Add(item.BindingField, null);
                                }

                                <CascadingValue Value="true" Name="@(nameof(IGenControl.IsSearchField))">
                                    @{
                                        foreach (IGenControl searchComp in SearchFieldComponents.OrderBy(x => x.Order).ToList())
                                        {
                                            <MudItem xs="searchComp.xs"
                                                     sm="searchComp.sm"
                                                     md="searchComp.md"
                                                     lg="searchComp.lg"
                                                     xl="searchComp.xl"
                                                     xxl="searchComp.xxl">
                                                @searchComp.RenderAsComponent(searchFieldModel)
                                            </MudItem>
                                        }
                                    }
                                </CascadingValue>
                            }
                        }
                        @{
                            <MudGrid Class="mt-1 mb-1 mr-1" Justify="Justify.FlexEnd">
                                @{
                                    <MudItem>
                                        @if (GenHeaderButtons is not null)
                                        {
                                            @GenHeaderButtons
                                        }
                                    </MudItem>

                                    <MudItem>
                                        <MudItem>
                                            @{
                                                if (!string.IsNullOrEmpty(ExcelFile))
                                                {
                                                    <MudFab EndIcon="@Icons.Custom.FileFormats.FileExcel"
                                                            Color="Color.Success"
                                                            Size="Size.Small"
                                                            DisableElevation="true"
                                                            Label="@ExcelButtonText"
                                                            @onclick="@(async _=> await GenExcel.Create(this,ExcelFile))" />
                                                }
                                            }
                                        </MudItem>
                                    </MudItem>
                                    if (Search.HasDelegate)
                                    {
                                        <MudItem Class="mr-7">
                                            <MudGrid Justify="Justify.FlexEnd">
                                                <MudItem>
                                                    <MudFab EndIcon="@Icons.Material.Filled.Search"
                                                            Color="Color.Info"
                                                            Size="Size.Small"
                                                            Label="@SearchText"
                                                            DisableElevation="true"
                                                            @onclick="OnSearchClicked" Disabled=" ((INonGenGrid)this). SearchDisabled" />
                                                </MudItem>

                                            </MudGrid>
                                        </MudItem>
                                    }
                                }
                            </MudGrid>
                        }

                    </MudGrid>
                }

            </CardHeaderContent>
            <CardHeaderActions>

            </CardHeaderActions>
        </MudCardHeader>


        @{
            if (!Update.HasDelegate && EditTrigger == TableEditTrigger.RowClick)
            {
                EditTrigger = TableEditTrigger.EditButton;
            }

            
            if (DataSource is not null)
            {
                if (OriginalTable is not null && OriginalTable.GroupFooterTemplate is null)
                    OriginalTable.GroupFooterTemplate = GroupFooterTemplate;

                if (OriginalTable is not null && OriginalTable.GroupHeaderTemplate is null)
                    OriginalTable.GroupHeaderTemplate = GroupHeaderTemplate;


                if (OriginalTable is not null && OriginalTable.ColGroup is null)
                    OriginalTable.ColGroup = ColGroup;

                var _height = Height ?? "50";
                var _measurement = Height is null ? "vh" : "px";
                <MudTable T="TModel"
                          @ref="OriginalTable"
                          Loading="@(GridIsBusy)"
                          LoadingProgressColor="@LoadingProgressColor"
                          Items="DataSource"
                          CancelEditIcon="@CancelEditIcon"
                          CancelEditTooltip="@CancelEditTooltip"
                          CommitEditIcon="@CommitEditIcon"
                          CommitEditTooltip="@CommitEditTooltip"
                          Bordered="@Bordered"
                          Outlined="@Outlined"
                          Striped="@Striped"
                          Dense="Dense"
                          GroupHeaderClass="@GroupHeaderClass"
                          GroupFooterClass="@GroupFooterClass"
                          GroupHeaderStyle="@GroupHeaderStyle"
                          GroupFooterStyle="@GroupFooterStyle"
                          GroupBy="@(GroupHeaderTemplate is not null && GroupFooterTemplate is not null?GroupBy:null)"
                          MultiSelection="MultiSelection"
                          Breakpoint="Breakpoint.None"
                          Hover="Hover"
                          Elevation="0"
                          FixedHeader="FixedHeader"
                          FixedFooter="FixedFooter"
                          Height="@(FixedHeader || FixedFooter ?$"{_height}{_measurement}":Height)"
                          @bind-SelectedItem="SelectedItem"
                          SelectedItems="@SelectedItems"
                          Filter="ViewState==ViewState.Create?null:Filter"
                          Virtualize="Virtualize"
                          RowEditPreview="async x => await MyRowEditPreview(x)"
                          RowEditCancel="async x => await OnCancelClick(x.CastTo<TModel>())"
                          RowEditCommit="async x => await Commit()"
                          IsEditRowSwitchingBlocked="true"
                          ApplyButtonPosition="TableApplyButtonPosition.End"
                          EditButtonPosition="TableEditButtonPosition.End"
                          EditTrigger="@(EditTrigger)"
                          ReadOnly="false"
                          CanCancelEdit="true">

                    <HeaderContent>
                        @{
                    if (((INonGenGrid)this).HasDetail && EditMode != EditMode.SmartForm)
                    {
                                <MudTh>

                                </MudTh>
                            }

                    Func<IGenControl, bool> predicate;

                    if (ViewState != ViewState.None && EditMode == EditMode.Inline)
                    {   //edit create vs

                        if (SelectedItem is null)
                        {
                            predicate = x => x.EditorVisible && x is not GenSpacer;

                        }
                        else
                        {
                            predicate = x => x.EditorVisible && x is not GenSpacer && x.IsEditorVisible(SelectedItem);

                        }

                    }
                    else if (ViewState != ViewState.None && EditMode != EditMode.Inline)
                    {
                        predicate = x => x.GridVisible && x is not GenSpacer;
                    }
                    else
                    {
                        predicate = x => x is not GenSpacer;
                    }

                    foreach (var item in GetComponentsOf<IGenControl>().Where(predicate).OrderBy(x => x.Order))
                    {
                        if (ViewState == ViewState.None)
                        {
                            if (!item.GridVisible)
                            {
                                        @*<MudTh>

                            </MudTh>*@
                                        continue;
                                    }
                                }

                                if (!EnableSorting)
                                {
                                    <MudTh>
                                        <span>@item.Label </span>
                                    </MudTh>
                                }
                                else
                                {
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<TModel, object>(x=> x.GetPropertyValue(item.BindingField))">@item.Label</MudTableSortLabel>
                                    </MudTh>
                                }


                            }


                        }

                        <MudTh></MudTh>

                        @if (Create.HasDelegate)
                        {
                            <MudTh>
                                <div style="@(((INonGenGrid)this).DetailClicked ? "pointer-events: none;opacity:0.4;" : string.Empty)">
                                    <MudIconButton Icon="@AddIcon" Size="Size.Medium" @onclick="async ()=>
                                    {
                                        ((INonGenGrid)this).NewDisabled  = true;
                                        await OnCreateClick();
                                        //((INonGenGrid)this).NewDisabled  = false;
                                    }"
                                                   Disabled="((INonGenGrid)this).NewDisabled || Disabled" />
                                </div>
                            </MudTh>
                        }
                    </HeaderContent>

                    <RowTemplate>

                        @{
                            if (((INonGenGrid)this).HasDetail && EditMode != EditMode.SmartForm)
                            {
                                var expandIcon = Icons.Material.Filled.ExpandMore;

                                if (ShouldDisplay(context))
                                {
                                    expandIcon = Icons.Material.Filled.ExpandLess;
                                }


                                var padding = Dense ? "9px" : "17px";

                                <MudTd Style="padding:0px!important;">
                                    <MudIconButton Size="Size.Small"
                                                   Style="@($"width:100%!important;height:100%!important;border-radius:0px!important;padding:{padding}!important;")"
                                                   Disabled="((INonGenGrid)this).ExpandDisabled"
                                                   Icon="@expandIcon"
                                                   OnClick="async () => await ((IGenGrid<TModel>)this).OnDetailClicked(context)" />
                                </MudTd>

                            }

                            var components = Components.Select(x => x.component).Where(x => x is not GenSpacer).OrderBy(x => x.Order);

                            foreach (var component in components)
                            {
                                if (EditMode == EditMode.Inline && SelectedItem is not null && ViewState != ViewState.None)
                                {
                                    //burada selected item e gore kontrol yapip context i gecmek gerek?
                                    if (!component.IsEditorVisible(context))
                                        continue;
                                }
                                else if (!component.GridVisible)
                                {
                                    continue;
                                }
                                <MudTd @onclick:stopPropagation="EditMode == EditMode.Form">
                                    @{
                                        if (component.GridVisible)
                                        {
                                            @component.RenderAsGridComponent(context)
                                        }
                                    }
                                </MudTd>
                            }

                            <MudTd></MudTd>


                            if (Delete.HasDelegate && EditTrigger == TableEditTrigger.RowClick)
                            {
                                <MudTd>
                                    <MudIconButton Size="@Size.Small"
                                                   Icon="@Icons.Material.Outlined.Delete"
                                                   Class="pa-0"
                                                   OnClick="@(() => OnDeleteClicked(context))" Disabled="Disabled || CancelDisabled" />
                                </MudTd>
                            }



                        }
                    </RowTemplate>


                  

                    <RowEditingTemplate Context="_context">

                        @{

                        //TODO bu necindir bul
                            if (EditMode != EditMode.Inline)
                            {
                                var currentRow = OriginalTable.Context.Rows.FirstOrDefault(x => x.Key.Equals(SelectedItem));
                                var editingRow = EditButtonActionList.Select(x => x.Target.CastTo<MudTr>()).FirstOrDefault(x => x.Item.CastTo<TModel>().Equals(SelectedItem));
                                if (editingRow is not null)
                                {
                                    editingRow?.Context.Table.SetEditingItem(null);


                                    editingRow.SetFieldValue("hasBeenCanceled", true);
                                    editingRow.SetFieldValue("hasBeenCommitted", false);
                                    editingRow.SetFieldValue("hasBeenClickedFirstTime", false);
                                }
                            }
                            if (((INonGenGrid)this).HasDetail && EditMode != EditMode.SmartForm)
                            {
                                <MudTd></MudTd>
                            }
                            //if (component.component.VisibleFunc is not null)
                            //{
                            //    component.component.EditorVisible = component.component.VisibleFunc.Invoke(SelectedItem);
                            //}

                            //else
                            //{
                            //    if (components.Where(x => x.BindingField == component.BindingField).Count() == 1)
                            //    {
                            //        component.SetEmpty();
                            //    }
                            //}
                            var components = Components.Select(x => x.component).Where(x => x is not GenSpacer).OrderBy(x => x.Order);

                            foreach (var component in components)
                            {
                                if (EditMode != EditMode.Inline || !ShouldShowDialog || ((INonGenGrid)this).DetailClicked)
                                {
                                    <MudTd Style="width: auto !important">
                                        @component.RenderAsGridComponent(_context)
                                    </MudTd>
                                }
                                else
                                {
                                    if (component.IsEditorVisible(_context))
                                    {
                                        <MudTd Style="width: auto !important">
                                            @component.RenderAsComponent(_context, true)
                                        </MudTd>
                                    }
                                    else
                                    {
                                        if (component is IGenControl cntrl)
                                        {
                                            cntrl.SetEmpty();
                                        }
                                       

                                    }

                                }
                            }

                            <MudTd>

                            </MudTd>

                        }


                    </RowEditingTemplate>

                    <ChildRowContent>
                        @{

                            if (EditMode != EditMode.SmartForm && ShouldDisplay(context) && ((INonGenGrid)this).HasDetail)
                            {
                                <tr style="display: table-row !important; overflow: hidden">
                                    <td style="display: table-cell !important; overflow: hidden" colspan="100">
                                        <CascadingValue Value="Disabled" Name="@nameof(Disabled)">
                                            @GenDetailGrid(context)
                                        </CascadingValue>
                                    </td>
                                </tr>
                            }


                        }

                    </ChildRowContent>

                    <PagerContent>
                        <MudTablePager PageSizeOptions="new[] { 10, 25, 50, 100, !DataSource.Any() ? 999 : DataSource.Count }" />
                    </PagerContent>

                    <EditButtonContent Context="button">

                        @{

                            TModel model = (TModel)button.ButtonAction.Target.CastTo<MudTr>().Item;
                            if (model is not null)
                            {
                                <div style="@(((INonGenGrid)this).DetailClicked ? "pointer-events: none;opacity:0.4;" : string.Empty)">
                                    @{
                                        if (!EditButtonActionList.Contains(button.ButtonAction))
                                            EditButtonActionList.Add(button.ButtonAction);

                                        if (Update.HasDelegate)
                                        {
                                            <MudIconButton @ref="EditButtonRef"
                                                           Size="@Size.Small"
                                                           Icon="@Icons.Material.Outlined.Edit"
                                                           Class="pa-0"
                                                           OnClick="()=> OnEditContextButtonClick(button)"
                                                           Disabled="button.ButtonDisabled||Disabled" />
                                        }

                                    }

                                    @{
                                        if (Delete.HasDelegate)
                                        {
                                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Class="pa-0" OnClick="@(() => OnDeleteClicked(model))" Disabled="button.ButtonDisabled||Disabled" />
                                        }

                                        if (GenSideButtons is not null)
                                        {
                                            @GenSideButtons(model)
                                        }
                                    }

                                </div>

                            }
                        }

                    </EditButtonContent>


                </MudTable>

             
                ((INonGenGrid)this).IsRendered = true;

            }


        }


    </MudCard>

</CascadingValue>