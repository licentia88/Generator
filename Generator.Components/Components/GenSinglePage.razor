@typeparam TModel  where TModel : class, new()

@inherits ComponentBase
@implements ISinglePage<TModel>



<style>
    .mud-dialog .mud-dialog-actions {
        flex: 0 0 auto;
        display: flex;
        margin-top: 0;
        padding-right: 3.5rem !important;
        align-items: center;
        justify-content: flex-end;
        border-bottom-left-radius: var(--mud-default-borderradius);
        border-bottom-right-radius: var(--mud-default-borderradius);
    }

    .mud-dialog .mud-dialog-content.mud-dialog-no-side-padding {
        padding: 0;
    }
</style>

@if (Model is null)
{
    return;
}

@{
    if (GridIsBusy)
    {
        <MudProgressLinear Color="@TemplateColor" Indeterminate="true" />

    }
}
<CascadingValue Name="Parent" Value="this">

    @{
        if (_isFirstRender)
        {
            @GenColumns
            _isFirstRender = false;
            StateHasChanged();
            return;
        }

    }
    <EditForm EditContext="@editContext" OnValidSubmit="async () => await OnCommit(true)" OnInvalidSubmit="InvalidSubmit">
        <MudDialog DefaultFocus="DefaultFocus.Element" OnBackdropClick="Close" DisableSidePadding="true">
            <DialogContent>

                <DataAnnotationsValidator />
                @*@<ValidationSummary />@*@

                <MudContainer Class="m-0" Style="max-height: 75vh;overflow-y: scroll;max-width:100vw!important">

                    <MudGrid Justify="Justify.FlexStart" Spacing="0">

                        @{
                            var components = Components.Select(x => x.component);

                            IGenComponent[] componentDetails = components as IGenComponent[] ?? components.ToArray();

                            foreach (var componentDetail in componentDetails)
                            {

                                //(componentDetail as IGenControl)?.ValidateField();

                                <MudItem Class="mt-4"
                                         xs="componentDetail.xs"
                                         sm="componentDetail.sm"
                                         md="componentDetail.md"
                                         lg="componentDetail.lg"
                                         xl="componentDetail.xl"
                                         xxl="componentDetail.xxl">
                                    @{

                                        if (componentDetail.IsEditorVisible(Model))
                                        {
                                            @componentDetail.RenderAsComponent(Model)

                                        }
                                        else
                                        {
                                            if (componentDetail is IGenControl cntrl && components.Where(x => x.BindingField == componentDetail.BindingField).All(x => !x.IsEditorVisible(Model)))
                                            {
                                                cntrl.SetEmpty();
                                            }
                                        }

                                    }
                                </MudItem>
                            }

                        }
                    </MudGrid>

                    @{
                        if (GenDetailGrid is not null)
                        {
                            INonGenGrid gridParam = new GenGrid<TModel>()
                            {
                                ViewState = this.ViewState,
                                GenValidator = new Validators.GenValidator<TModel>()
                            };

                            gridParam.CurrentGenPage = this;


                            (this).GenGrid = gridParam as GenGrid<TModel>;

                            GenGrid.SelectedItem = this.Model;
                            GenGrid.Components = this.Components;
                            GenGrid.Parent = gridParam;

                            @*<div style=" overflow-y: scroll!important; ">*@
                            @*<div style="overflow-x:hidden; overflow-y:hidden;">*@
                            <CascadingValue Value="Parameters" Name="@(nameof(Parameters))">
                                <CascadingValue Value="Model" Name="@(nameof(GenGrid.SelectedItems))">
                                    <CascadingValue Value="@(ViewState)" Name="@(nameof(GenGrid.ViewState))">
                                        <CascadingValue Value="@gridParam" Name="@(nameof(GenGrid.Parent))">
                                            @GenDetailGrid(Model)
                                        </CascadingValue>
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>

                            @*</div>*@
                            @*</div>*@

                        }
                    }

                </MudContainer>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="Close">@CancelText</MudButton>
                <MudButton Color="Color.Success" Variant="Variant.Filled" ButtonType="ButtonType.Submit">
                    @SubmitText
                </MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>

</CascadingValue>