@typeparam TModel where TModel : new()


@implements IGenPage<TModel>
@implements IDisposable

<style>
      .mud-dialog .mud-dialog-actions
      {
        flex: 0 0 auto;
        display: flex;
        margin-top:2rem!important;
/*        padding: 8px !important;*/
        padding-right:3.5rem!important;
        align-items: center;
        justify-content: flex-end;
        border-bottom-left-radius: var(--mud-default-borderradius);
        border-bottom-right-radius: var(--mud-default-borderradius);
    }
      
</style>

@{
    if (SelectedItem is null) return;

    <CascadingValue Value="GenGrid" Name="@(nameof(GenGrid.ParentGrid))">
        <EditForm Model="@SelectedItem" OnValidSubmit="((INonGenPage)this).OnCommit" OnInvalidSubmit="OnInvalidSubmit">
            <MudDialog DefaultFocus="DefaultFocus.Element" OnBackdropClick="(()=> Close(true))">
                <DialogContent>
                    @{
                        <DataAnnotationsValidator />
                    }
                    <MudContainer Class="m-0 p-2" Style="overflow-y: scroll">
                        @{
                            @*<div style="overflow-x:hidden; overflow-y:hidden;">*@
                            <MudGrid Justify="Justify.FlexStart" Spacing="0">

                                @{
                                    foreach (var componentDetail in Components)
                                    {
                                        if(componentDetail.component.EditorVisibleFunc is not null)
                                        {
                                            componentDetail.component.EditorVisible = componentDetail.component.EditorVisibleFunc.Invoke(SelectedItem);
                                        }

                                        
                                        <MudItem Class="mt-4" 
                                                 xs="componentDetail.component.xs"
                                                 sm="componentDetail.component.sm"
                                                 md="componentDetail.component.md"
                                                 lg="componentDetail.component.lg"
                                                 xl="componentDetail.component.xl"
                                                 xxl="componentDetail.component.xxl">
                                            @{
                                               if (componentDetail.component.EditorVisible)
                                               {
                                                    @componentDetail.component.RenderAsComponent(SelectedItem);
                                               }


                                            }
                                        </MudItem>
                                    }

                                }
                            </MudGrid>
                            @*</div>*@


                            if (GenGrid.EditMode == EditMode.SmartForm && GenGrid.GenDetailGrid is not null)
                            {
                                @*<div style=" overflow-y: scroll!important; ">*@
                                @*<div style="overflow-x:hidden; overflow-y:hidden;">*@
                                <CascadingValue Value="Parameters" Name="@(nameof(Parameters))">
                                    <CascadingValue Value="SelectedItem" Name="@(nameof(SelectedItem))">
                                        <CascadingValue Value="GenGrid" Name="@(nameof(GenGrid.ParentGrid))">
                                            @GenGrid.GenDetailGrid(SelectedItem)
                                        </CascadingValue>
                                    </CascadingValue>
                                </CascadingValue>

                                @*</div>
                                    </div>*@

                            }
                        }
                    </MudContainer>
                </DialogContent>
                <DialogActions>
                    <MudButton OnClick="()=> Close(true)">@GenGrid.CancelText</MudButton>
                    <MudButton Color="Color.Success" Variant="Variant.Filled" ButtonType="ButtonType.Submit">
                        @(GetSubmitTextFromViewState())
                    </MudButton>
                </DialogActions>
            </MudDialog>
        </EditForm>

    </CascadingValue>



}