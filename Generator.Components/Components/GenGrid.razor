@typeparam TModel where TModel : new()
@inherits MudTable<TModel>
@implements INonGenGrid
@implements IGenGrid<TModel>

<CascadingValue Name="@(nameof(ParentGrid))" Value="this">

    @{
        if (GenColumns is not null && IsFirstRender)
        {
            @GenColumns

            <CascadingValue Value="true" Name="@(nameof(IGenComponent.IsSearchField))">
                @GenSearchFields
            </CascadingValue>


            IsFirstRender = false;
        }
    }

    <MudCard Elevation="4" Style="@(Style ?? "width:100%important;overflow-x:hidden!important;")" Class="@Class">
        <MudCardHeader>
            <CardHeaderContent>
                <MudGrid>
                    <MudText Style="margin: 1rem !important" Align="Align.Start" Typo="Typo.h6">
                        @Title
                    </MudText>
                    <MudSpacer />
                    @{
                        if (EnableSearch)
                        {
                            <MudTextField @bind-Value="@_searchString"
                                          Disabled="SearchDisabled"
                                          Class="mt-0 mr-5"
                                          Placeholder="@SearchPlaceHolderText"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          IconSize="Size.Medium">

                            </MudTextField>
                        }
                    }
                </MudGrid>

                @{
                  <MudGrid Class="">
                                    @{
                                        if (GenSearchFields is not null)
                                        {
                                            var searchFieldModel = new Dictionary<string, object>();

                                            foreach (var item in SearchFieldComponents.Where(x => x is not GenSpacer))
                                            {
                                                searchFieldModel.Add(item.BindingField, null);
                                            }



                                            <CascadingValue Value="true" Name="@(nameof(IGenComponent.IsSearchField))">
                                                @{
                                                    foreach (IGenComponent searchComp in SearchFieldComponents.OrderBy(x => x.Order).ToList())
                                                    {
                                                        <MudItem xs="searchComp.xs"
                                                                 sm="searchComp.sm"
                                                                 md="searchComp.md"
                                                                 lg="searchComp.lg"
                                                                 xl="searchComp.xl"
                                                                 xxl="searchComp.xxl">
                                                            @searchComp.RenderAsComponent(searchFieldModel)
                                                        </MudItem>
                                                    }
                                                }
                                            </CascadingValue>
                                        }
                                    }
                                    @{
                                        <MudGrid Class="" Justify="Justify.FlexEnd">
                                            @{
                                                <MudItem>
                                                    <MudGrid Justify="Justify.FlexEnd">
                                                        @if (GenHeaderButtons is not null)
                                                        {
                                                            @GenHeaderButtons

                                                        }
                                                    </MudGrid>
                                                </MudItem>
                                               
                                                <MudItem>
                                                    <MudGrid Justify="Justify.FlexEnd">
                                                        <MudItem>
                                                            @{
                                                                if (!string.IsNullOrEmpty(ExcelFile))
                                                                {
                                                                    <MudFab EndIcon="@Icons.Custom.FileFormats.FileExcel"
                                                                            Color="Color.Success"
                                                                            Size="Size.Small"
                                                                            DisableElevation="true"
                                                                            Label="@ExcelButtonText"
                                                                            @onclick="@(async x=> await GenExcel.Create<TModel>(this,ExcelFile))" />
                                                                }
                                                            }
                                                        </MudItem>

                                                    </MudGrid>
                                                </MudItem>
                                                if (Search.HasDelegate)
                                                {
                                                    <MudItem Class="mr-7">
                                                        <MudGrid Justify="Justify.FlexEnd">
                                                            <MudItem>
                                                                <MudFab EndIcon="@Icons.Material.Filled.Search"
                                                                        Color="Color.Info"
                                                                        Size="Size.Small"
                                                                        Label="@SearchText"
                                                                        DisableElevation="true"
                                                                        @onclick="OnSearchClicked" Disabled="SearchDisabled" />
                                                            </MudItem>

                                                        </MudGrid>
                                                    </MudItem>
                                                }

                                                @*<MudItem xs="1" sm="1" md="1" lg="1" xl="1" xxl="1">
                                                    <MudGrid Justify="Justify.Center">
                                                        <MudItem>

                                                        </MudItem>

                                                    </MudGrid>
                                                </MudItem>*@



                                            }
                                        </MudGrid>
                                    }

                                </MudGrid>
                }

            </CardHeaderContent>
            <CardHeaderActions>

            </CardHeaderActions>
        </MudCardHeader>
 

        @{

            if (DataSource is not null)
            {
                var _height = Height ?? "50";
                var _measurement = Height is null ? "vh" : "px";
                <MudTable T="TModel"
                          @ref="OriginalTable"
                          Loading="@(GridIsBusy)"
                          LoadingProgressColor="@LoadingProgressColor"
                          Items="DataSource"
                          CancelEditIcon="@CancelEditIcon"
                          CancelEditTooltip="@CancelEditTooltip"
                          CommitEditIcon="@CommitEditIcon"
                          CommitEditTooltip="@CommitEditTooltip"
                          Bordered="@Bordered"
                          Outlined="@Outlined"
                          Striped="@Striped"
                          Dense="Dense"
                          MultiSelection="MultiSelection"
                          Breakpoint="Breakpoint.None"
                          Hover="Hover"
                          Elevation="0"
                          FixedHeader="FixedHeader"
                          FixedFooter="FixedFooter"
                          Height="@(FixedHeader || FixedFooter ?$"{_height}{_measurement}":Height)"
                          @bind-SelectedItem="SelectedItem"
                          SelectedItems="@SelectedItems"
                          Filter="new Func<TModel, bool>(SearchFunction)"
                          Virtualize="Virtualize"
                          RowEditPreview="async x => await MyRowEditPreview(x)"
                          RowEditCancel="async x => await OnCancelClick(x.CastTo<TModel>())"
                          RowEditCommit="async x => await Commit()"
                          IsEditRowSwitchingBlocked="true"
                          ApplyButtonPosition="TableApplyButtonPosition.End"
                          EditButtonPosition="TableEditButtonPosition.End"
                          EditTrigger="@EditTrigger"
                          ReadOnly="false"
                          CanCancelEdit="true">

                    <HeaderContent >
                        @{
                            if (HasDetail && EditMode != EditMode.SmartForm)
                            {
                                <MudTh>

                                </MudTh>
                            }

                            Func<IGenComponent, bool> predicate;

                            if (ViewState != ViewState.None && EditMode == EditMode.Inline)
                            {   //edit create vs
                                predicate = x => x.EditorVisible && x is not GenSpacer;
                            }
                            else if (ViewState != ViewState.None && EditMode != EditMode.Inline)
                            {
                                predicate = x => x.GridVisible && x is not GenSpacer;
                            }
                            else
                            {
                                predicate = x => x is not GenSpacer;
                            }

                            foreach (var item in GetComponentsOf<IGenComponent>().Where(predicate).OrderBy(x => x.Order))
                            {
                                if (ViewState == ViewState.None)
                                {
                                    if (!item.GridVisible)
                                    {
                                        <MudTh>

                                        </MudTh>
                                        continue;
                                    }
                                }


                                if (!EnableSorting)
                                {
                                    <MudTh>
                                        <span>@item.Label </span>
                                    </MudTh>
                                }
                                else
                                {
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<TModel, object>(x=> x.GetPropertyValue(item.BindingField))">@item.Label</MudTableSortLabel>
                                    </MudTh>
                                }


                            }


                        }

                        <MudTh></MudTh>

                        @if (Create.HasDelegate)
                        {
                            <MudTh>
                                <div style="@(DetailClicked ? "pointer-events: none;opacity:0.4;" : string.Empty)">
                                    @*<MudGrid Class="ml-10" Justify="Justify.FlexEnd">*@
                                    <MudIconButton Icon="@AddIcon" Size="Size.Medium" @onclick="async ()=> { NewDisabled = true; await OnCreateClick(); NewDisabled = false; }" Disabled="NewDisabled|| Disabled" />
                                    @*</MudGrid>*@
                                </div>
                            </MudTh>
                        }
                    </HeaderContent>

                    <RowTemplate>

                        @{
                            if (HasDetail && EditMode != EditMode.SmartForm)
                            {
                                var expandIcon = Icons.Material.Filled.ExpandMore;

                                if (ShouldDisplay(context))
                                {
                                    expandIcon = Icons.Material.Filled.ExpandLess;
                                }


                                var padding = Dense ? "9px" : "17px";

                                <MudTd Style="padding:0px!important;">
                                    <MudIconButton Size="Size.Small"
                                                    Style="@($"width:100%!important;height:100%!important;border-radius:0px!important;padding:{padding}!important;")"
                                                    Disabled="ExpandDisabled"
                                                    Icon="@expandIcon"
                                                    OnClick="async () => await OnDetailClicked(context)" />
                                </MudTd>

                            }


                            foreach (var item in GetComponentsOf<IGenComponent>().Where(x => x is not GenSpacer).OrderBy(x => x.Order))
                            {
                                if (!item.GridVisible)
                                {
                                    <MudTd>

                                    </MudTd>
                                    continue;
                                }
                                <MudTd @onclick:stopPropagation="EditMode == EditMode.Form">
                                    @item.RenderAsGridComponent(context)
                                </MudTd>
                            }

                            //CreateTusuYerineGelecek kolon
                            <MudTd></MudTd>


                            if (Delete.HasDelegate && EditTrigger == TableEditTrigger.RowClick)
                            {
                                //_ShouldRender = !CancelDisabled;
                                <MudTd>
                                    <MudIconButton Size="@Size.Small"
                                                   Icon="@Icons.Outlined.Delete"
                                                   Class="pa-0"
                                                   OnClick="@(() => OnDeleteClicked(context))" Disabled="Disabled || CancelDisabled" />


                                </MudTd>
                            }



                        }
                    </RowTemplate>

                    
                    
                    <RowEditingTemplate Context="_context" >

                        
                        @{


                            if (EditMode != EditMode.Inline)
                            {
                                var currentRow = OriginalTable.Context.Rows.FirstOrDefault(x => x.Key.Equals(SelectedItem));
                                var editingRow = EditButtonActionList.Select(x => x.Target.CastTo<MudTr>()).FirstOrDefault(x => x.Item.CastTo<TModel>().Equals(SelectedItem));
                                if (editingRow is not null)
                                {
                                    editingRow?.Context.Table.SetEditingItem(null);


                                    editingRow.SetFieldValue("hasBeenCanceled", false);
                                    editingRow.SetFieldValue("hasBeenCommitted", false);
                                    editingRow.SetFieldValue("hasBeenClickedFirstTime", false);
                                }
                            }
                            if (HasDetail && EditMode != EditMode.SmartForm)
                            {
                                <MudTd></MudTd>
                            }

                            foreach (var item in GetComponentsOf<IGenComponent>().Where(x => x.EditorVisible && x is not GenSpacer).OrderBy(x => x.Order).ToList())
                            {
                                if (EditMode != EditMode.Inline || !ShoulShowDialog || DetailClicked)
                                {

                                    <MudTd Style="width: auto !important">
                                        @item.RenderAsGridComponent(_context)
                                    </MudTd>
                                }
                                else
                                {
                                    <MudTd Style="width: auto !important">
                                        @item.RenderAsComponent(_context, true)
                                    </MudTd>
                                }

                            }

                            <MudTd>

                            </MudTd>

                        }


                    </RowEditingTemplate>

                    <ChildRowContent>
                        @{
                            
                            if (EditMode != EditMode.SmartForm && ShouldDisplay(context) && HasDetail)
                            {
                                <tr style="display: table-row !important; overflow: hidden">
                                    <td style="display: table-cell !important; overflow: hidden" colspan="12">
                                        <CascadingValue Value="Disabled" Name="@nameof(Disabled)">
                                            @GenDetailGrid(context)
                                        </CascadingValue>
                                    </td>
                                </tr>
                            }


                        }

                    </ChildRowContent>

                    <PagerContent>
                        <MudTablePager PageSizeOptions="new[] { 10, 25, 50, 100, !DataSource.Any() ? 999 : DataSource.Count }" />
                    </PagerContent>

                    <EditButtonContent Context="button">

                        @{

                            TModel model = (TModel)button.ButtonAction.Target.CastTo<MudTr>().Item;
                        }

                        <div style="@(DetailClicked ? "pointer-events: none;opacity:0.4;" : string.Empty)">
                            @{
                                if (Update.HasDelegate)
                                {
                                    if (!EditButtonActionList.Contains(button.ButtonAction))
                                        EditButtonActionList.Add(button.ButtonAction);

                                    <MudIconButton @ref="EditButtonRef"
                                                   Size="@Size.Small"
                                                   Icon="@Icons.Outlined.Edit"
                                                   Class="pa-0"
                                                   OnClick="()=>OnEditContextButtonClick(button)"
                                                   Disabled="button.ButtonDisabled||Disabled" />
                                }

                            }

                            @{
                                if (Delete.HasDelegate)
                                {
                                    <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" Class="pa-0" OnClick="@(() => OnDeleteClicked(model))" Disabled="button.ButtonDisabled||Disabled" />
                                }
                            }

                        </div>
                    </EditButtonContent>
                </MudTable>

                IsRendered = true;

            }


        }


    </MudCard>

</CascadingValue>