@using Generator.Examples.Shared



<GenGrid DataSource="@(DataSource.Where(x=> x.OM_DESCRIPTION.Contains("test")).ToList())"
         TModel="ORDERS_M"
         EditMode="EditMode.Inline"
         Class="m-2"
         Load="OnLoad"
         OnRender="OnRender"
         Create="@( async x=> await CreateAsync(x))"
         Update="@( async x=> await UpdateAsync(x))"
         Delete="@( async x=> await DeleteAsync(x))">
    <GenColumns>
        <GenTextField BindingField="@nameof(ORDERS_M.OM_ROWID)"  Label="RefNo" Disabled="true" />
        <GenTextField BindingField="@nameof(ORDERS_M.OM_DESCRIPTION)" Label="Description" />
    </GenColumns>
</GenGrid>



@code{


    public List<ORDERS_M> DataSource { get; set; } = new();

    [Parameter]
    public USER Parent { get; set; }

    [Inject]
    public IOrdersMService OrdersMService { get; set; }


    GenTextField descTextField;

    protected override  async Task OnInitializedAsync()
    {
        DataSource  =await OrdersMService.ReadAsync(new(Parent.U_ROWID));

        //DataSource = result;
    }

    public void OnLoad(IGenView<ORDERS_M> page)
    {
        descTextField = page.GetComponent<GenTextField>(nameof(ORDERS_M.OM_DESCRIPTION));
        page.SelectedItem.OM_DESCRIPTION = "test";
        descTextField.Class = "";
        //page.StateHasChanged();
    }

    public void OnRender(IGenView<ORDERS_M> page)
    {
 
        descTextField.GetReference().ValueChanged = EventCallback.Factory.Create<object>(this, ValChanged);

    }
    public void ValChanged(object str)
    {
        descTextField.OnValueChanged(str);
    }
    public async ValueTask CreateAsync(ORDERS_M data)
    {
        data.OM_USER_REFNO = Parent.U_ROWID;

        var result = await OrdersMService.CreateAsync(new RESPONSE_REQUEST<ORDERS_M>(data));

        DataSource.Add(result);
    }

    public async ValueTask UpdateAsync(ORDERS_M data)
    {

        var result = await OrdersMService.UpdateAsync(new RESPONSE_REQUEST<ORDERS_M>(data));

        DataSource.Replace(data, result);

    }

    public async ValueTask DeleteAsync(ORDERS_M data)
    {
        var result = await OrdersMService.DeleteAsync(new RESPONSE_REQUEST<ORDERS_M>(data));

        DataSource.Remove(data);

    }
    }